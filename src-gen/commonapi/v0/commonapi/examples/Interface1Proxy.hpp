/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002201130.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_Interface1_PROXY_HPP_
#define V0_COMMONAPI_EXAMPLES_Interface1_PROXY_HPP_

#include <v0/commonapi/examples/Interface1ProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace commonapi {
namespace examples {

template <typename ... _AttributeExtensions>
class Interface1Proxy
    : virtual public Interface1,
      virtual public Interface1ProxyBase,
      virtual public _AttributeExtensions... {
public:
    Interface1Proxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~Interface1Proxy();

    typedef Interface1 InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute aString.
     */
    virtual AStringAttribute& getAStringAttribute() {
        return delegate_->getAStringAttribute();
    }


    /**
     * Calls setUInt32 with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void setUInt32(const uint32_t &_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls setUInt32 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> setUInt32Async(const uint32_t &_value, SetUInt32AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getUInt32 with synchronous semantics.
     *
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void getUInt32(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_value, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls getUInt32 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> getUInt32Async(GetUInt32AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< Interface1ProxyBase> delegate_;
};

typedef Interface1Proxy<> Interface1ProxyDefault;

namespace Interface1Extensions {
    template <template <typename > class _ExtensionType>
    class AStringAttributeExtension {
     public:
        typedef _ExtensionType< Interface1ProxyBase::AStringAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< Interface1ProxyBase::AStringAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AStringAttributeExtension(Interface1ProxyBase& proxy): attributeExtension_(proxy.getAStringAttribute()) {
        }
    
        inline extension_type& getAStringAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace Interface1Extensions

//
// Interface1Proxy Implementation
//
template <typename ... _AttributeExtensions>
Interface1Proxy<_AttributeExtensions...>::Interface1Proxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< Interface1ProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< Interface1ProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
Interface1Proxy<_AttributeExtensions...>::~Interface1Proxy() {
}

template <typename ... _AttributeExtensions>
void Interface1Proxy<_AttributeExtensions...>::setUInt32(const uint32_t &_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
    delegate_->setUInt32(_value, _internalCallStatus, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> Interface1Proxy<_AttributeExtensions...>::setUInt32Async(const uint32_t &_value, SetUInt32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->setUInt32Async(_value, _callback, _info);
}
template <typename ... _AttributeExtensions>
void Interface1Proxy<_AttributeExtensions...>::getUInt32(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_value, const CommonAPI::CallInfo *_info) {
    delegate_->getUInt32(_internalCallStatus, _value, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> Interface1Proxy<_AttributeExtensions...>::getUInt32Async(GetUInt32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->getUInt32Async(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &Interface1Proxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool Interface1Proxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool Interface1Proxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& Interface1Proxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& Interface1Proxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace examples
} // namespace commonapi
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v0::commonapi::examples::Interface1Proxy,
    _AttributeExtension> {
    typedef typename ::v0::commonapi::examples::Interface1Proxy<
            ::v0::commonapi::examples::Interface1Extensions::AStringAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_EXAMPLES_Interface1_PROXY_HPP_
