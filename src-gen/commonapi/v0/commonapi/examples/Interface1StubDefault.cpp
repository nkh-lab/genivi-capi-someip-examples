/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v202002201130.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0/commonapi/examples/Interface1StubDefault.hpp>
#include <assert.h>

namespace v0 {
namespace commonapi {
namespace examples {

Interface1StubDefault::Interface1StubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(Interface1::getInterfaceVersion()) {
}

const CommonAPI::Version& Interface1StubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    (void)_client;
    return interfaceVersion_;
}

Interface1StubRemoteEvent* Interface1StubDefault::initStubAdapter(const std::shared_ptr< Interface1StubAdapter> &_adapter) {
    CommonAPI::Stub<Interface1StubAdapter, Interface1StubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}

 const std::string& Interface1StubDefault::getAStringAttribute() {
     return aStringAttributeValue_;
 }

 const std::string& Interface1StubDefault::getAStringAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
     (void)_client;
     return getAStringAttribute();
 }

 void Interface1StubDefault::setAStringAttribute(std::string _value) {
     std::shared_ptr<Interface1StubAdapter> stubAdapter = CommonAPI::Stub<Interface1StubAdapter,
     Interface1StubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAStringAttribute(true);
         const bool valueChanged = (aStringAttributeValue_ != _value);
         if (valueChanged) {
             aStringAttributeValue_ = std::move(_value);
             fireAStringAttributeChanged(aStringAttributeValue_);
         }
         stubAdapter->lockAStringAttribute(false);
     } else {
         const bool valueChanged = trySetAStringAttribute(std::move(_value));
         if (valueChanged) {
             fireAStringAttributeChanged(aStringAttributeValue_);
         }
     }
}

 bool Interface1StubDefault::trySetAStringAttribute(std::string _value) {
     if (!validateAStringAttributeRequestedValue(_value))
         return false;

     bool valueChanged;
     std::shared_ptr<Interface1StubAdapter> stubAdapter = CommonAPI::Stub<Interface1StubAdapter, Interface1StubRemoteEvent>::stubAdapter_.lock();
     if(stubAdapter) {
         stubAdapter->lockAStringAttribute(true);
         valueChanged = (aStringAttributeValue_ != _value);
         aStringAttributeValue_ = std::move(_value);
         stubAdapter->lockAStringAttribute(false);
     } else {
         valueChanged = (aStringAttributeValue_ != _value);
         aStringAttributeValue_ = std::move(_value);
     }

     return valueChanged;
 }

 bool Interface1StubDefault::validateAStringAttributeRequestedValue(const std::string &_value) {
     (void)_value;
     return true;
 }

 void Interface1StubDefault::setAStringAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
     (void)_client;
     setAStringAttribute(_value);
 }

 void Interface1StubDefault::onRemoteAStringAttributeChanged() {
     // No operation in default
 }

 void Interface1StubDefault::RemoteEventHandler::onRemoteAStringAttributeChanged() {
     assert(defaultStub_ !=NULL);
     defaultStub_->onRemoteAStringAttributeChanged();
 }

 bool Interface1StubDefault::RemoteEventHandler::onRemoteSetAStringAttribute(std::string _value) {
     assert(defaultStub_ !=NULL);
     return defaultStub_->trySetAStringAttribute(std::move(_value));
 }

 bool Interface1StubDefault::RemoteEventHandler::onRemoteSetAStringAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
     (void)_client;
     return onRemoteSetAStringAttribute(_value);
 }


void Interface1StubDefault::setUInt32(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value, setUInt32Reply_t _reply) {
    (void)_client;
    (void)_value;
    _reply();
}

void Interface1StubDefault::getUInt32(const std::shared_ptr<CommonAPI::ClientId> _client, getUInt32Reply_t _reply) {
    (void)_client;
    uint32_t value = 0ul;
    _reply(value);
}




Interface1StubDefault::RemoteEventHandler::RemoteEventHandler(Interface1StubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace examples
} // namespace commonapi
} // namespace v0
