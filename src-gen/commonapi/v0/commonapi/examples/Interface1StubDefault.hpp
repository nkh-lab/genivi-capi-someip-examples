/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012231137.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_EXAMPLES_Interface1_STUB_DEFAULT_HPP_
#define V0_COMMONAPI_EXAMPLES_Interface1_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v0/commonapi/examples/Interface1Stub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace commonapi {
namespace examples {

/**
 * Provides a default implementation for Interface1StubRemoteEvent and
 * Interface1Stub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT Interface1StubDefault
    : public virtual Interface1Stub {
public:
    COMMONAPI_EXPORT Interface1StubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(Interface1::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT Interface1StubRemoteEvent* initStubAdapter(const std::shared_ptr< Interface1StubAdapter> &_adapter) {
        CommonAPI::Stub<Interface1StubAdapter, Interface1StubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const std::string &getAStringAttribute() {
        return aStringAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const std::string &getAStringAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getAStringAttribute();
    }
    COMMONAPI_EXPORT virtual void setAStringAttribute(std::string _value) {
        const bool valueChanged = trySetAStringAttribute(std::move(_value));
        if (valueChanged) {
            fireAStringAttributeChanged(aStringAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setAStringAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
        (void)_client;
        setAStringAttribute(_value);
    }
    COMMONAPI_EXPORT virtual void setUInt32(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value, setUInt32Reply_t _reply) {
        (void)_client;
        (void)_value;
        _reply();
    }
    COMMONAPI_EXPORT virtual void getUInt32(const std::shared_ptr<CommonAPI::ClientId> _client, getUInt32Reply_t _reply) {
        (void)_client;
        uint32_t value = 0ul;
        _reply(value);
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetAStringAttribute(std::string _value) {
        if (!validateAStringAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<Interface1StubAdapter> stubAdapter = CommonAPI::Stub<Interface1StubAdapter, Interface1StubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockAStringAttribute(true);
            valueChanged = (aStringAttributeValue_ != _value);
            aStringAttributeValue_ = std::move(_value);
            stubAdapter->lockAStringAttribute(false);
        } else {
            valueChanged = (aStringAttributeValue_ != _value);
            aStringAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateAStringAttributeRequestedValue(const std::string &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteAStringAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual Interface1StubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(Interface1StubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        COMMONAPI_EXPORT virtual void onRemoteAStringAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteAStringAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetAStringAttribute(std::string _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetAStringAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetAStringAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _value) {
            (void)_client;
            return onRemoteSetAStringAttribute(_value);
        }

    private:
        Interface1StubDefault *defaultStub_;
    };
protected:
    Interface1StubDefault::RemoteEventHandler remoteEventHandler_;

private:

    std::string aStringAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace examples
} // namespace commonapi
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_EXAMPLES_Interface1_STUB_DEFAULT
