/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v202002201657.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v0/commonapi/examples/Interface1SomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v0 {
namespace commonapi {
namespace examples {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createInterface1SomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< Interface1SomeIPProxy>(_address, _connection);
}

void initializeInterface1SomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.examples.Interface1:v0_1:commonapi.examples.Interface1",
        0x1234, 0x5678, 0, 1);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         Interface1::getInterface(),
         &createInterface1SomeIPProxy);
}

INITIALIZER(registerInterface1SomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeInterface1SomeIPProxy);
}

Interface1SomeIPProxy::Interface1SomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          aString_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x80f2), CommonAPI::SomeIP::event_id_t(0x80f2), CommonAPI::SomeIP::method_id_t(0xbb8), true, false, CommonAPI::SomeIP::method_id_t(0xbb9), true, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr))
    {
    }

    Interface1SomeIPProxy::AStringAttribute& Interface1SomeIPProxy::getAStringAttribute() {
        return aString_;
    }


        void Interface1SomeIPProxy::setUInt32(const uint32_t &_value, CommonAPI::CallStatus &_internalCallStatus, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_value(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint32_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >,
                CommonAPI::SomeIP::SerializableArguments<
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7530),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    deploy_value,
    _internalCallStatus);
    }
    std::future<CommonAPI::CallStatus> Interface1SomeIPProxy::setUInt32Async(const uint32_t &_value, SetUInt32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_value(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint32_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >,
            CommonAPI::SomeIP::SerializableArguments<
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7530),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            deploy_value,
            [_callback] (CommonAPI::CallStatus _internalCallStatus) {
                if (_callback)
                    _callback(_internalCallStatus);
            },
            std::make_tuple());
    }
        void Interface1SomeIPProxy::getUInt32(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_value, const CommonAPI::CallInfo *_info) {
            CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_value(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
            CommonAPI::SomeIP::ProxyHelper<
                CommonAPI::SomeIP::SerializableArguments<
                >,
                CommonAPI::SomeIP::SerializableArguments<
                    CommonAPI::Deployable<
                        uint32_t,
                        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                    >
                >
            >::callMethodWithReply(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7531),
            false,
            false,
    (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
    _internalCallStatus,
    deploy_value);
    _value = deploy_value.getValue();
    }
    std::future<CommonAPI::CallStatus> Interface1SomeIPProxy::getUInt32Async(GetUInt32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
        CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_value(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
        return CommonAPI::SomeIP::ProxyHelper<
            CommonAPI::SomeIP::SerializableArguments<
            >,
            CommonAPI::SomeIP::SerializableArguments<
                CommonAPI::Deployable<
                    uint32_t,
                    CommonAPI::SomeIP::IntegerDeployment<uint32_t>
                >
            >
        >::callMethodAsync(
            *this,
            CommonAPI::SomeIP::method_id_t(0x7531),
            false,
            false,
            (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
            [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _value) {
                if (_callback)
                    _callback(_internalCallStatus, _value.getValue());
            },
            std::make_tuple(deploy_value));
    }



    void Interface1SomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
    }

} // namespace examples
} // namespace commonapi
} // namespace v0
